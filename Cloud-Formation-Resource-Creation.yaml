AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::LanguageExtensions'

Description: AWS Resource Creation
# Metadata:
# Parameters:
# Rules:
Mappings: 
  Subnets:
    APublic: 
      CIDR: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: APublicSubnet
    APrivate: 
      CIDR: 10.0.2.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: APrivateSubnet      
    BPublic: 
      CIDR: 10.0.3.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: BPublicSubnet
    BPrivate: 
      CIDR: 10.0.4.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: BPrivateSubnet



# Conditions:
# Transform:
Resources:
## Creating VPC ##
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: stack
         Value: production
       - Key: Name
         Value: Prod

## Creating Internet Gateway ##
  CFIG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
       - Key: stack
         Value: production
       - Key: Name
         Value: Prod-IG

## Associate Internet Gateway ##
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: CFVPC
      InternetGatewayId:
        Ref: CFIG

## Creating Subnets ##
  'Fn::ForEach::Subnets':
    - Subnet
    - [APublic, APrivate, BPublic, BPrivate]
    - '${Subnet}Subnet':
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: 
            Ref: CFVPC
          CidrBlock:
            Fn::FindInMap:
              - Subnets
              - Fn::Sub: ${Subnet}
              - CIDR
          AvailabilityZone:
            Fn::FindInMap:
              - Subnets
              - Fn::Sub: ${Subnet}
              - AvailabilityZone
          MapPublicIpOnLaunch:
            Fn::FindInMap:
              - Subnets
              - Fn::Sub: ${Subnet}
              - MapPublicIpOnLaunch
          Tags:
            Fn::FindInMap:
              - Subnets
              - Fn::Sub: ${Subnet}
              - Tags

## Route Table Creation ## 
  'Fn::ForEach::RouteTables':
    - RouteTable
    - [CFTAPublic, CFTBPublic, CFTAPrivate, CFTBPrivate]
    - '${RouteTable}RouteTable':
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: 
            Ref: CFVPC
          Tags:
            - Key: Name
              Value:
                Fn::Sub: '${RouteTable}RTable'

      
## Associate Public Subnet with RouteTable ##
  'Fn::ForEach::RouteTableAssociations':
    - RouteTableAssociation
    - [A, B]
    - 'PublicSubnet${RouteTableAssociation}RouteTableAssociation':
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: 
            Ref: 
              Fn::Sub: 'CFT${RouteTableAssociation}PublicRouteTable'
          SubnetId: 
            Ref:
              Fn::Sub: '${RouteTableAssociation}PublicSubnet'

      'PrivateSubnet${RouteTableAssociation}RouteTableAssociation':
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: 
            Ref: 
              Fn::Sub: 'CFT${RouteTableAssociation}PrivateRouteTable'
          SubnetId: 
            Ref:
              Fn::Sub: '${RouteTableAssociation}PrivateSubnet'        

 ## Create Route in Public Subnet to IG ## 
  'Fn::ForEach::IGWRoutes':
    - IGWRoute
    - [A, B]
    - 'PublicSubnet${IGWRoute}Route':
        Type: AWS::EC2::Route
        Properties:
          RouteTableId:
            Ref: 
              Fn::Sub: CFT${IGWRoute}PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId:
            Ref: CFIG

 ## Creating NACL ## 
  'Fn::ForEach::NetworkAcl':
    - subnet
    - [APublic, BPublic,APrivate,BPrivate]
    - '${subnet}NACL':
        Type: AWS::EC2::NetworkAcl
        Properties:
          VpcId: 
            Ref: CFVPC
          Tags:
            - Key: Name
              Value:
                Fn::Sub: '${subnet}NACL'

## NetworkAclAssociation ## 
  'Fn::ForEach::NetworkAclAssociation':
    - AvailZone
    - [APublic, BPublic, APrivate, BPrivate]
    - '${AvailZone}NetworkAclAssociation':      
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
          SubnetId:
            Ref: 
              Fn::Sub: ${AvailZone}Subnet
          NetworkAclId:
            Ref: 
              Fn::Sub: ${AvailZone}NACL


##  NACL Inbound & Outbound Entry ##
  'Fn::ForEach::NetworkAclInboundEntry':
    - NAC
    - [APublic, BPublic,APrivate,BPrivate]
    - '${NAC}NACLInboundRule':
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            Ref: 
              Fn::Sub: ${NAC}NACL
          RuleNumber: 100
          Protocol: -1
          RuleAction: allow
          CidrBlock: 0.0.0.0/0

  'Fn::ForEach::NetworkAclOutboundEntry':
    - NAC
    - [APublic, BPublic,APrivate,BPrivate]
    - '${NAC}NACLoutboundRule':
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            Ref: 
              Fn::Sub: ${NAC}NACL
          RuleNumber: 100
          Protocol: -1
          Egress: true
          RuleAction: allow
          CidrBlock: 0.0.0.0/0

## Creating NATGateway ## 

  'Fn::ForEach::NateGateways':
    - NATGate
    - [A, B]
    - '${NATGate}NATGateway': 
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: 
            Fn::GetAtt: 
              - Fn::Sub: ${NATGate}NATElasticIP
              - AllocationId
          SubnetId: 
            Ref:
              Fn::Sub: '${NATGate}PublicSubnet'
          Tags:
            - Key: Name
              Value:
                Fn::Sub: '${NATGate}NAT'

# Creating EIP ##

  'Fn::ForEach::NateGatewayEIP':
    - NATEIP
    - [A, B]
    - '${NATEIP}NATElasticIP': 
        Type: AWS::EC2::EIP
        Properties:       
          Tags:
            - Key: Name
              Value:
                Fn::Sub: '${NATEIP}NACL'

# Creating Routein Privatesubnet to NATGateway ##
  
  'Fn::ForEach::NATGatewayRoute':
  - NATRoute
  - [A, B]
  - 'PrivateSubnet${NATRoute}Entry':
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        RouteTableId: 
          Ref: 
            Fn::Sub: 'CFT${NATRoute}PrivateRouteTable'
        NatGatewayId: 
          Ref:
            Fn::Sub: '${NATRoute}NATGateway' 
 

## KeyPair##
  Ec2KeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: InstanceKeyPair1
      
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: 
        Ref: CFVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          CidrIp: "0.0.0.0/0"
          FromPort: 22
          ToPort: 22
      SecurityGroupEgress:
        - IpProtocol: all
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

## Launch Template
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: CFLaunchTemplate
      LaunchTemplateData:
        DisableApiTermination: true
        ImageId: ami-066784287e358dad1
        InstanceType: t2.micro
        KeyName: 
          Ref: Ec2KeyPair
        SecurityGroupIds:
          - Ref: InstanceSecurityGroup
        UserData: 
          Fn::Base64: 
            Fn::Sub: |
              #!/bin/bash
              yum update -y
              yum install httpd -y
              systemctl start httpd
              systemctl enable httpd
              echo "<h1>This is my instance: $(ec2-metadata --availability-zone) from ${AWS::Region} </h1>" >> /var/www/html/index.html

## Auto Scaling
  CFASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: 
          Ref: MyLaunchTemplate
        Version: 
          Fn::GetAtt: 
            - MyLaunchTemplate
            - LatestVersionNumber
      MaxSize: '2'
      MinSize: '2'
      VPCZoneIdentifier: 
        - Ref: APrivateSubnet
        - Ref: BPrivateSubnet
      MetricsCollection: 
        - Granularity: 1Minute
          Metrics: 
            - GroupMinSize
            - GroupMaxSize
      TargetGroupARNs:
        - Ref: TargetGroup    
      HealthCheckType: ELB  
## Target Group ##
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Name: CFTargetGroup
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags: 
        - Key: Name
          Value: CFTargetGroup
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: 
        Ref: CFVPC 

##  Security Group for the ALB **
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Security group for ALB
      VpcId: 
        Ref: CFVPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ## Application Load Balancer ##
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: 
        Fn::Sub: "${AWS::StackName}-Alb"
      Scheme: internet-facing
      SecurityGroups: 
        - Ref: ALBSecurityGroup
      Subnets: 
        - Ref: APublicSubnet
        - Ref: BPublicSubnet        
      Tags: 
        - Key: Name
          Value: ALB
      Type: application

## Listener for the ALB ##
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: 
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  MainVPC:
    Description: VPC Id
    Value: 
      Ref: CFVPC
    Export:
      Name: 
        Fn::Sub: ${AWS::StackName}-VPC

  'Fn::ForEach::SubnetOutput':
    - Subnet
    - [APublic, APrivate, BPublic, BPrivate]
    - '${Subnet}SubnetOutput':
        Description:
          Fn::Sub: Subnet Id-${Subnet}
        Value: 
          Ref:
            Fn::Sub: ${Subnet}Subnet
        Export:
          Name: 
            Fn::Sub: ${AWS::StackName}-${Subnet}Subnet

  keypair:
    Description: Value of the Private key
    Value: 
      Fn::GetAtt: 
        - Ec2KeyPair
        - KeyFingerprint

  ALBURL:
    Description: "URL of the ALB"
    Value: 
      Fn::Sub: "http://${ApplicationLoadBalancer.DNSName}"